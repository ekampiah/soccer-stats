#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var WebSocket = require("ws");
var chatServer = require("../chatServer");
var uniqueNamesGenerator = require("unique-username-generator");
var { v4: uuidv4 } = require("uuid");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Websocket setup
 */

console.log("Starting WebSocket server on port " + port);
const wsServer = new WebSocket.WebSocketServer({ noServer: true });
server.on("upgrade", (req, socket, head) => {
  wsServer.handleUpgrade(req, socket, head, (ws) => {
    if (!req.url) return;
    const username = uniqueNamesGenerator.generateUsername();
    const uuid = uuidv4();
    chatServer.connections[uuid] = ws;
    chatServer.users[uuid] = { username };
    console.log(`Joined chat as ${username}`);
    ws.send(JSON.stringify(`Joined chat as ${username}`));
    ws.addEventListener("message", (message) =>
      chatServer.handleMessage(message.data, uuid)
    );
    ws.addEventListener("close", () => chatServer.handleClose(uuid));
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
